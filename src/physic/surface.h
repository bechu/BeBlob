/////////////////////////////////////////////////////////////////////////
/// BeBlob
/// Copyright (C) 2014 Jérôme Béchu
///
/// This program is free software: you can redistribute it and/or modify
/// it under the terms of the GNU General Public License as published by
/// the Free Software Foundation, either version 3 of the License, or
/// (at your option) any later version.
///
/// This program is distributed in the hope that it will be useful,
/// but WITHOUT ANY WARRANTY; without even the implied warranty of
/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
/// GNU General Public License for more details.
///
/// You should have received a copy of the GNU General Public License
/// along with this program.  If not, see <http://www.gnu.org/licenses/>.
/////////////////////////////////////////////////////////////////////////

#ifndef BEBLOB_PHYSIC_SURFACE_H
#define BEBLOB_PHYSIC_SURFACE_H

#include <SFML/System/Vector2.hpp>
#include <list>

#include "components/land_physic.h"
#include <SFML/System/Vector2.hpp>

namespace beblob
{
namespace physic
{

////////////////////////////////////////////////////////////
/// \brief a surface definition
////////////////////////////////////////////////////////////
struct Surface
{
    ////////////////////////////////////////////////////////////
    /// \brief surface instance creation
    ////////////////////////////////////////////////////////////
    Surface();

    ////////////////////////////////////////////////////////////
    /// \brief location
    ////////////////////////////////////////////////////////////
    Surface(const sf::Vector2i& location);

    ////////////////////////////////////////////////////////////
    /// \brief init the surface
    ////////////////////////////////////////////////////////////
    void init(const sf::Vector2i& location);

    ////////////////////////////////////////////////////////////
    /// \brief copy constructor
    ////////////////////////////////////////////////////////////
    Surface& operator = (const Surface& s);

    ////////////////////////////////////////////////////////////
    /// \brief test if the surface are equal
    ///
    /// \param s the surface compared
    ///
    /// \return true if equal
    ////////////////////////////////////////////////////////////
    bool operator==(const Surface& s) const;

    ////////////////////////////////////////////////////////////
    /// \brief test if the surface are not equal
    ///
    /// \param s the surface compared
    ///
    /// \return true if not equal
    ////////////////////////////////////////////////////////////
    bool operator!=(const Surface& s) const;

    ////////////////////////////////////////////////////////////
    /// \brief test if point is inside the surface
    ///
    /// \param point
    ///
    /// \return true test point inside
    ////////////////////////////////////////////////////////////
    bool contains(const sf::Vector2i& point) const;

    ////////////////////////////////////////////////////////////
    /// \brief test if surface is in surface
    ///
    /// \param other the other surface
    ///
    /// \return true test surface inside
    ////////////////////////////////////////////////////////////
    bool contains(const Surface& other) const;

    ////////////////////////////////////////////////////////////
    /// \brief test if surface is aligned
    ///
    /// \param other the other surface
    ///
    /// \return true if surface is aligned
    ////////////////////////////////////////////////////////////
    bool isAligned(const Surface& other) const;

    ////////////////////////////////////////////////////////////
    /// \brief merge surface
    ///
    /// \param other the other surface
    ////////////////////////////////////////////////////////////
    void merge(const Surface& other);

    ////////////////////////////////////////////////////////////
    /// \brief remove a location from a surface
    ///
    /// \param location position have to remove
    ///
    /// \return the surfaces created after the point substraction
    ////////////////////////////////////////////////////////////
    std::vector<Surface> remove(const sf::Vector2i& location);

    ////////////////////////////////////////////////////////////
    /// \brief return the width of the surface
    ////////////////////////////////////////////////////////////
    uint32_t width() const;

    ////////////////////////////////////////////////////////////
    /// \brief return the height of the surface
    ////////////////////////////////////////////////////////////
    uint32_t height() const;

    /// min position
    sf::Vector2i Min;

    /// max position
    sf::Vector2i Max;

    ////////////////////////////////////////////////////////////
    /// \brief publish the surface in a land solid
    ////////////////////////////////////////////////////////////
    void publish(component::LandSolid& land);

    void publish_home(component::LandSolid& land);
};

////////////////////////////////////////////////////////////
/// \brief list of surface
////////////////////////////////////////////////////////////
class Surfaces :
        public std::list<Surface>
{
public:
    ////////////////////////////////////////////////////////////
    /// \brief append a surface to the list
    ///
    /// \param surface
    ////////////////////////////////////////////////////////////
    void append(const Surface &surface);
private:
    ////////////////////////////////////////////////////////////
    /// \brief merge surfaces
    ///
    /// \param surface have to merge
    ///
    /// \return bool succeed
    ////////////////////////////////////////////////////////////
    bool merge(const Surface &surface);
};

}
}

#endif // BEBLOB_PHYSIC_SURFACE_H
